@page "/transactions"
@using CashFlo.Services.Interface
@using CashFlo.Model
@inject ITransactionService transactionService
@inject IUserServices userService
@inject NavigationManager Navigation


<div class="layout">
    <!-- Sidebar -->
    <div class="sidebar">
        <h3>Menu</h3>
        <ul>
            <li><NavLink href="/dashboard">Dashboard</NavLink></li>
            <li><NavLink href="/transactions">Transactions</NavLink></li>
            <li><NavLink href="/debt">Debt</NavLink></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Balance Section -->
        <div class="balance-section">
            <h4>Your Balance: @balance.ToString("C")</h4>
        </div>

        <!-- Search and Filters -->
        <div class="search-filter-section">
            <input type="text" @bind="searchText" class="search-input" placeholder="Search by Description or Tag" />
            <button class="btn-search" @onclick="OnSearchChanged">Search</button>
            <button class="btn-clear" @onclick="ClearSearch">Clear</button>

            <select @bind="selectedType" class="filter-select">
                <option value="">All Types</option>
                <option value="Income">Income</option>
                <option value="Expense">Expense</option>
            </select>

            <select @bind="selectedCategory" class="filter-select">
                <option value="">All Categories</option>
                <option value="Food">Food</option>
                <option value="Transport">Transport</option>
                <option value="Shopping">Shopping</option>
                <option value="Utilities">Utilities</option>
                <option value="Income">Income</option>
            </select>
        </div>

        <!-- Transaction Form -->
        <div class="transaction-form">
            <button class="btn" @onclick="ShowModal">Add Transaction</button>
        </div>

        <!-- Modal Popup -->
        @if (isModalVisible)
        {
            <div class="modal-backdrop">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5>Add Transaction</h5>
                        <button class="close-button" @onclick="CloseModal">×</button>
                    </div>
                    <div class="modal-body">
                        <form @onsubmit="HandleTransactionSubmit">
                            <div class="form-group">
                                <label for="transactionType">Transaction Type:</label>
                                <select id="transactionType" @bind="newTransaction.Type">
                                    <option value="Income">Income</option>
                                    <option value="Expense">Expense</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="amount">Amount:</label>
                                <input type="number" id="amount" class="form-control" @bind="newTransaction.Amount" required />
                            </div>
                            <div class="form-group">
                                <label for="description">Description:</label>
                                <input type="text" id="description" class="form-control" @bind="newTransaction.Description" required />
                            </div>
                            <div class="form-group">
                                <label for="date">Date:</label>
                                <input type="date" id="date" class="form-control" @bind="newTransaction.Date" />
                            </div>
                            <div class="form-group">
                                <label>Tags:</label>
                                <div>
                                    @if (defaultTags != null)
                                    {
                                        @foreach (var tag in defaultTags)
                                        {
                                            <label>
                                                <input type="checkbox" value="@tag" @onchange="(e) => HandleTagSelection(e, tag)" /> @tag
                                            </label>
                                        }
                                    }
                                </div>
                                <div>
                                    <input type="text" @bind="customTag" placeholder="Add custom tag" />
                                    <button type="button" class="btn-secondary" @onclick="AddCustomTag">Add Tag</button>
                                </div>
                            </div>
                            <div class="selected-tags">
                                <h5>Selected Tags:</h5>
                                <ul>
                                    @foreach (var tag in newTransaction.Tags)
                                    {
                                        <li>
                                            @tag
                                            <button type="button" class="btn-delete" @onclick="() => RemoveTag(tag)">Delete</button>
                                        </li>
                                    }
                                </ul>
                            </div>
                            <button type="submit" class="btn">Add Transaction</button>
                        </form>
                    </div>
                </div>
            </div>
        }

        <!-- Transaction List -->
        <div class="transaction-list">
            <h5>Transactions</h5>
            @foreach (var dateGroup in transactions.GroupBy(t => t.Date.Date))
            {
                <div class="date-group">
                    <h6>@dateGroup.Key.ToString("MMMM dd, yyyy")</h6>
                    <ul>
                        @foreach (var transaction in dateGroup)
                        {
                            <li class="transaction-item">
                                <span>@transaction.Description</span>
                                <span>@transaction.Amount.ToString("C")</span>
                                <span>@transaction.Type</span>
                                <button class="btn-delete" @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

    <style >
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #F5F5F7;
        color: #333;
        margin: 0;
        padding: 0;
        line-height: 1.6;
    }

    .balance-section {
        background-color: #2F4059;
        color: #fff;
        padding: 30px;
        margin: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 5px 15px #fff;
    }

        .balance-section h4 {
            font-size: 28px;
            font-weight: 600;
            margin: 0;
        }

    .search-filter-section {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
        margin-top: 20px;
    }

    .search-input,
    .filter-select {
        padding: 12px;
        border-radius: 8px;
        border: 1px solid #ccc;
        font-size: 16px;
        width: 280px;
        max-width: 100%;
        box-sizing: border-box;
        transition: all 0.3s ease;
    }

        .search-input::placeholder,
        .filter-select option {
            color: #777;
        }

        .search-input:focus,
        .filter-select:focus {
            border-color: #3A84D2;
            outline: none;
        }

    .transaction-form {
        text-align: center;
        margin: 40px;
    }

        .transaction-form .btn {
            background-color: #3A84D2;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            border: none;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .transaction-form .btn:hover {
                background-color: #3372A3;
            }

    .transaction-item {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border-bottom: 1px solid #ccc;
        background-color: #fff;
    }

        .transaction-item button {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
        }

            .transaction-item button:hover {
                background-color: #c0392b;
            }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 9999;
    }

    .modal-content {
        background-color: white;
        margin: 0 auto;
        padding: 30px;
        border-radius: 10px;
        width: 80%;
        max-width: 500px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease-out;
        transform: translateY(0);
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%); 
    }

        .modal-content h5 {
            font-size: 24px;
            color: #333;
            margin-bottom: 20px;
        }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-bottom: 15px;
        border-bottom: 1px solid #f1f1f1;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 20px;
        color: #aaa;
        cursor: pointer;
        transition: color 0.3s ease;
    }

        .close-button:hover {
            color: #333;
        }

    /* Form Fields */
    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            font-weight: 600;
            color: #555;
            margin-bottom: 8px;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 16px;
            margin-top: 5px;
            transition: border-color 0.3s ease;
        }

            .form-group input:focus,
            .form-group select:focus {
                border-color: #3A84D2;
                outline: none;
            }

            .form-group input[type="number"] {
                -moz-appearance: textfield;
            }

                .form-group input[type="number"]::-webkit-outer-spin-button,
                .form-group input[type="number"]::-webkit-inner-spin-button {
                    -webkit-appearance: none;
                    margin: 0;
                }


    /* Tag Section */
    .selected-tags {
        margin-top: 15px;
    }

    /* Delete Tag Button */
    .btn-delete {
        background-color: #e74c3c;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 12px;
        cursor: pointer;
        margin-left: 10px;
    }

        .btn-delete:hover {
            background-color: #c0392b;
        }

    .selected-tags ul {
        padding: 0;
        list-style: none;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .selected-tags li {
        background-color: #e0e5b6;
        padding: 8px 12px;
        border-radius: 15px;
        font-size: 14px;
    }

    .selected-tags button {
        background-color: #3A84D2;
        color: white;
        padding: 8px 16px;
        border-radius: 5px;
        font-size: 14px;
        cursor: pointer;
        margin-top: 10px;
        transition: background-color 0.3s ease;
    }

        .selected-tags button:hover {
            background-color: #3372A3;
        }


    /* Form Fields */
    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            font-weight: 600;
            color: #555;
            margin-bottom: 8px;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 16px;
            margin-top: 5px;
            transition: border-color 0.3s ease;
        }

            .form-group input:focus,
            .form-group select:focus {
                border-color: #3A84D2;
                outline: none;
            }

            .form-group input[type="number"] {
                -moz-appearance: textfield;
            }

                .form-group input[type="number"]::-webkit-outer-spin-button,
                .form-group input[type="number"]::-webkit-inner-spin-button {
                    -webkit-appearance: none;
                    margin: 0;
                }

    /* Tag Section */
    .selected-tags {
        margin-top: 15px;
    }

        .selected-tags ul {
            padding: 0;
            list-style: none;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .selected-tags li {
            background-color: #e0e5b6;
            padding: 8px 12px;
            border-radius: 15px;
            font-size: 14px;
        }

        .selected-tags button {
            background-color: #3A84D2;
            color: white;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.3s ease;
        }

            .selected-tags button:hover {
                background-color: #3372A3;
            }

    /* Transaction List */
    .transaction-list {
        padding: 20px;
        margin: 20px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

        .transaction-list h5 {
            font-size: 24px;
            margin-bottom: 20px;
        }

        .transaction-list ul {
            list-style: none;
            padding: 0;
        }

        .transaction-list li {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid #ccc;
        }

            .transaction-list li:last-child {
                border-bottom: none;
            }

    .container {
        margin: 20px auto;
        max-width: 800px;
        font-family: Arial, sans-serif;
    }

    .balance-section {
        text-align: center;
        padding: 20px;
        background-color: #f4f4f9;
        margin-bottom: 20px;
        border-radius: 8px;
    }

    .search-filter-section {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .btn-search, .btn-clear, .btn-add, .btn-submit {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        background-color: #007BFF;
        color: white;
    }

    .btn-clear {
        background-color: #FF6F61;
    }

    .modal-backdrop {
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 90%;
        max-width: 400px;
    }

    .transaction-item {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border-bottom: 1px solid #ccc;
    }

    .date-group {
        margin-bottom: 20px;
    }

        .date-group h6 {
            margin: 0 0 10px;
        }

    .sidebar {
        width: 250px;
        background-color: #2c3e50;
        color: #ecf0f1;
        padding: 20px;
        height: 100vh;
        border-radius: 8px;
        box-shadow: 4px 0 10px rgba(0, 0, 0, 0.2);
    }

        .sidebar h3 {
            font-size: 22px;
            color: #ecf0f1;
            margin-bottom: 20px;
        }

        .sidebar ul {
            list-style: none;
            padding: 0;
        }

            .sidebar ul li {
                margin-bottom: 15px;
            }

                .sidebar ul li a {
                    color: #ecf0f1;
                    text-decoration: none;
                    font-size: 16px;
                    transition: color 0.3s;
                }

                    .sidebar ul li a:hover {
                        color: #3498db;
                    }

    
    .layout {
        display: flex
    }

    .sidebar {
        width: 20%;
        background-color: #000080;
        padding: 20px;
        border-right: 1px solid #ddd;
    }

    .main-content {
        width: 80%;
        padding: 20px;
    }

    .balance-section,
    .transaction-form,
    .transaction-list {
        margin-bottom: 20px;
    }
</style>
@code {
    private decimal balance = 0;
    private List<TransactionM> transactions = new List<TransactionM>();
    private List<TransactionM> filteredTransactions = new List<TransactionM>();
    private TransactionM newTransaction = new TransactionM();
    private List<string> defaultTags = new() { "Food", "Transport", "Shopping", "Utilities", "Income" };
    private string customTag = "";
    private string searchText = "";
    private string selectedType = "";
    private string selectedCategory = "";
    private bool isModalVisible = false;


    protected override void OnInitialized()
    {
        var username = userService.GetLoggedInUsername();
        LoadTransactions(username);
        LoadBalance(username);
    }

    private void LoadTransactions(string username)
    {
        transactions = transactionService.GetAllTransactions(username);
        FilterTransactions();
    }

    private void DeleteTransaction(int transactionId)
    {
        var username = userService.GetLoggedInUsername();

        // Proceed with transaction deletion without updating balance
        var success = transactionService.DeleteTransaction(transactionId, username);

        if (success)
        {
            // Reload the transaction list without recalculating balance
            LoadTransactions(username);
        }
    }


    private void RemoveTag(string tag)
    {
        newTransaction.Tags.Remove(tag);
    }

    private void LoadBalance(string username)
    {
        balance = transactionService.GetUserTotalBalance(username);
    }

    private void FilterTransactions()
    {
        try
        {
            filteredTransactions = transactions
                .Where(t => (string.IsNullOrEmpty(searchText) || t.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase) || t.Tags.Any(tag => tag.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
                        && (string.IsNullOrEmpty(selectedType) || t.Type.Equals(selectedType, StringComparison.OrdinalIgnoreCase))
                        && (string.IsNullOrEmpty(selectedCategory) || t.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while filtering transactions: {ex.Message}");
            // Optionally, you can log the exception to a file or show a user-friendly message
        }
    }


    private void OnSearchChanged()
    {
        FilterTransactions();
    }

    private void OnFilterChanged()
    {
        FilterTransactions();
    }
    private void ClearSearch()
    {
        searchText = "";
        LoadTransactions(userService.GetLoggedInUsername());
    }
    private void HandleTransactionSubmit()
    {
        var username = userService.GetLoggedInUsername();

        if (newTransaction.Amount <= 0 || string.IsNullOrEmpty(newTransaction.Description))
        {
            return; // Invalid transaction
        }

        newTransaction.Username = username;

        // Deduct from balance if the transaction type is "Expense"
        if (newTransaction.Type == "Expense")
        {
            balance -= newTransaction.Amount; // Subtract the expense from the current balance
        }
        else if (newTransaction.Type == "Income")
        {
            balance += newTransaction.Amount; // Add income to the balance
        }

        // Add the transaction to the service
        var success = transactionService.AddTransaction(newTransaction);

        if (success)
        {
            // Reset the form
            newTransaction = new TransactionM();

            // Reload transactions and balance
            LoadTransactions(username);
            CloseModal();
        }
    }



    private void HandleTagSelection(ChangeEventArgs e, string tag)
    {
        if ((bool)e.Value!)
        {
            if (!newTransaction.Tags.Contains(tag))
            {
                newTransaction.Tags.Add(tag);
            }
        }
        else
        {
            newTransaction.Tags.Remove(tag);
        }
    }

    private void AddCustomTag()
    {
        if (!string.IsNullOrWhiteSpace(customTag) && !newTransaction.Tags.Contains(customTag))
        {
            newTransaction.Tags.Add(customTag);
            customTag = string.Empty;
        }
    }

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
}



